name: Build and Push Container Image
description: Build and push Docker image to Google Artifact Registry
inputs:
  name:
    description: The name of the image to build
    required: true
  project:
    description: The Google Cloud Platform project to push to
    required: true
  repository:
    description: The repository in Google Artifact Registry to push to
    required: true
  region:
    description: The Google Cloud Platform region where the repository is located
    required: true
    default: europe-west3
  serviceAccountKey:
    description: The Service Account key to authenticate with Google Artifact Registry
    required: true
  tags:
    description: Image tag generation parameters
    required: false
outputs:
  image:
    description: The pushed image including the tag
    value: ${{steps.push.outputs.image}}
runs:
  using: composite
  steps:
    - name: Enable KVM group perms
      run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
    - name: Install Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-23.05
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build image
      id: build
      shell: bash
      run: |
        nix build
        image="$(docker load -qi result | sed 's/^Loaded image: \(.*\)$/\1/')"
        dockerfile="$(mktemp)"
        echo "FROM $image" > "$dockerfile"
        echo "::set-output name=dockerfile::$dockerfile"
        echo "::set-output name=context::$(mktemp -d)"
        echo "::set-output name=image::$image"
    - name: Generate metadata
      id: meta
      shell: bash
      run: |
        echo "::set-output name=registry::${{inputs.region}}-docker.pkg.dev"
        echo "::set-output name=image::${{inputs.region}}-docker.pkg.dev/${{inputs.project}}/${{inputs.repository}}/${{inputs.name}}"
    - name: Authenticate Docker with Artifact Registry
      uses: docker/login-action@v2
      with:
        registry: ${{steps.meta.outputs.registry}}
        username: _json_key
        password: ${{inputs.serviceAccountKey}}
    - name: Generate metadata for Docker
      id: image
      uses: docker/metadata-action@v4
      with:
        images: ${{steps.meta.outputs.image}}
        tags: ${{inputs.tags}}
    - name: Build image and push to Artifact Registry
      uses: docker/build-push-action@v3
      with:
        context: ${{steps.build.outputs.context}}
        file: ${{steps.build.outputs.dockerfile}}
        push: true
        tags: ${{steps.image.outputs.tags}}
        labels: ${{steps.image.outputs.labels}}
